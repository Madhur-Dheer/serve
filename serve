#!/usr/bin/python3.5


# This file implements the scoring service shell. You don't necessarily need to modify it for various
# algorithms. It starts nginx and gunicorn with the correct configurations and then simply waits until
# gunicorn exits.
#
# The flask server is specified to be the app object in wsgi.py.
#
# Check README.md file for information about environment variables being used.

from __future__ import print_function
import multiprocessing
import os
import signal
import subprocess
import sys
import attr
import logging

logging.basicConfig(
    level=logging.INFO,
    format='%(levelname)s %(asctime)-15s: %(funcName)s:%(lineno)d: %(message)s')

logger = logging.getLogger(__name__)
cpu_count = multiprocessing.cpu_count()

model_server_timeout = os.environ.get('MODEL_SERVER_TIMEOUT', 60)
model_server_workers = int(os.environ.get('MODEL_SERVER_WORKERS', cpu_count))
model_server_worker_type = os.environ.get('MODEL_SERVER_WORKER_TYPE', "gevent")
model_server_worker_threads = int(os.environ.get('MODEL_SERVER_WORKER_THREADS', 1))
unix_socket_path = os.environ.get('MODEL_SERVER_UNIX_SOCKET_PATH', "/tmp/gunicorn.sock")
start_nginx = os.environ.get('MODEL_SERVER_START_NGINX', "true")


@attr.s(frozen=True)
class WebServer:
    """
    WebServer consists of process id and its signal of termination
    """
    pid = attr.ib()
    signal = attr.ib()

def create_nginx():
    if start_nginx.lower() != "true":
        return None

    # link the log streams to stdout/err so they will be logged to the container logs
    subprocess.check_call(['mkdir', '-p', '/var/log/nginx'])
    subprocess.check_call(['ln', '-sf', '/dev/stdout', '/var/log/nginx/access.log'])
    subprocess.check_call(['ln', '-sf', '/dev/stderr', '/var/log/nginx/error.log'])

    nginx = subprocess.Popen(['nginx', '-p', '/opt/amazon/', '-c', '/opt/amazon/nginx.conf'])

    logger.info('Started nginx server')

    return WebServer(nginx.pid, signal.SIGQUIT)


def create_gunicorn():
    args = ['gunicorn'] \
        + (['--config', '/opt/amazon/gunicorn.py'] if (os.environ.get('MODEL_SERVER_PROFILER_ID') is not None) else []) \
        + ['--timeout', str(model_server_timeout),
            '-k', model_server_worker_type,
            '-b', 'unix:{}'.format(unix_socket_path),
            '-w', str(model_server_workers),
            '--threads', str(model_server_worker_threads),
            'asml_model_hosting_server.wsgi:app']

    gunicorn = subprocess.Popen(args)

    logger.info('Started gunicorn server')

    return WebServer(gunicorn.pid, signal.SIGTERM)


def sigterm_handler(servers):
    for server in servers:
        try:
            os.kill(server.pid, server.signal)
        except OSError:
            pass
    sys.exit(0)


def start_server():
    print('Starting the inference server with {} worker{}'.format(
        model_server_workers,
        '' if model_server_workers == 1 else 's'))

    # Starting the required servers based on value of "use_nginx" variable
    servers = [server for server in [create_nginx(), create_gunicorn()] if server is not None]

    signal.signal(signal.SIGTERM, lambda a, b: sigterm_handler(servers))

    # If either subprocess exits, so do we.
    pids = set([server.pid for server in servers])
    while True:
        pid, _ = os.wait()
        if pid in pids:
            break

    sigterm_handler(servers)
    print('Inference server exiting')

# The main routine just invokes the start function.


if __name__ == '__main__':
    start_server()




